# REST API Testing Guide with Postman

## Setup Instructions

### 1. Install Dependencies
```bash
npm install
```

### 2. Start the Server
```bash
# For development (with auto-restart)
npm run dev

# For production
npm start
```

The server will start on `http://localhost:3000`

## API Endpoints Testing

### Base URL: `http://localhost:3000`

---

## 1. Health Check
**GET** `/api/health`

**Purpose:** Check if the API is running

**Postman Setup:**
- Method: GET
- URL: `http://localhost:3000/api/health`

**Expected Response (200 OK):**
```json
{
  "success": true,
  "message": "API is running",
  "timestamp": "2025-06-22T10:30:45.123Z"
}
```

---

## 2. Get All Users
**GET** `/api/users`

**Purpose:** Retrieve all users

**Postman Setup:**
- Method: GET
- URL: `http://localhost:3000/api/users`

**Expected Response (200 OK):**
```json
{
  "success": true,
  "count": 3,
  "data": [
    {
      "id": 1,
      "name": "John Doe",
      "email": "john@example.com",
      "age": 30
    },
    {
      "id": 2,
      "name": "Jane Smith",
      "email": "jane@example.com",
      "age": 25
    },
    {
      "id": 3,
      "name": "Bob Johnson",
      "email": "bob@example.com",
      "age": 35
    }
  ]
}
```

---

## 3. Get User by ID
**GET** `/api/users/:id`

**Purpose:** Retrieve a specific user

**Postman Setup:**
- Method: GET
- URL: `http://localhost:3000/api/users/1`

**Expected Response (200 OK):**
```json
{
  "success": true,
  "data": {
    "id": 1,
    "name": "John Doe",
    "email": "john@example.com",
    "age": 30
  }
}
```

**Test Case - User Not Found:**
- URL: `http://localhost:3000/api/users/999`
- Expected Response (404 Not Found):
```json
{
  "success": false,
  "message": "User not found"
}
```

---

## 4. Create New User
**POST** `/api/users`

**Purpose:** Create a new user

**Postman Setup:**
- Method: POST
- URL: `http://localhost:3000/api/users`
- Headers: `Content-Type: application/json`
- Body (raw JSON):
```json
{
  "name": "Alice Cooper",
  "email": "alice@example.com",
  "age": 28
}
```

**Expected Response (201 Created):**
```json
{
  "success": true,
  "message": "User created successfully",
  "data": {
    "id": 4,
    "name": "Alice Cooper",
    "email": "alice@example.com",
    "age": 28
  }
}
```

**Test Cases to Try:**

1. **Missing Fields:**
```json
{
  "name": "Test User"
}
```
Expected: 400 Bad Request with validation errors

2. **Invalid Email:**
```json
{
  "name": "Test User",
  "email": "invalid-email",
  "age": 25
}
```
Expected: 400 Bad Request

3. **Duplicate Email:**
```json
{
  "name": "Another John",
  "email": "john@example.com",
  "age": 25
}
```
Expected: 409 Conflict

---

## 5. Update User (Full Update)
**PUT** `/api/users/:id`

**Purpose:** Update all fields of a user

**Postman Setup:**
- Method: PUT
- URL: `http://localhost:3000/api/users/1`
- Headers: `Content-Type: application/json`
- Body (raw JSON):
```json
{
  "name": "John Smith Updated",
  "email": "john.updated@example.com",
  "age": 31
}
```

**Expected Response (200 OK):**
```json
{
  "success": true,
  "message": "User updated successfully",
  "data": {
    "id": 1,
    "name": "John Smith Updated",
    "email": "john.updated@example.com",
    "age": 31
  }
}
```

---

## 6. Update User (Partial Update)
**PATCH** `/api/users/:id`

**Purpose:** Update only specific fields

**Postman Setup:**
- Method: PATCH
- URL: `http://localhost:3000/api/users/2`
- Headers: `Content-Type: application/json`
- Body (raw JSON):
```json
{
  "age": 26
}
```

**Expected Response (200 OK):**
```json
{
  "success": true,
  "message": "User updated successfully",
  "data": {
    "id": 2,
    "name": "Jane Smith",
    "email": "jane@example.com",
    "age": 26
  }
}
```

---

## 7. Delete User
**DELETE** `/api/users/:id`

**Purpose:** Delete a user

**Postman Setup:**
- Method: DELETE
- URL: `http://localhost:3000/api/users/3`

**Expected Response (200 OK):**
```json
{
  "success": true,
  "message": "User deleted successfully",
  "data": {
    "id": 3,
    "name": "Bob Johnson",
    "email": "bob@example.com",
    "age": 35
  }
}
```

**Test Case - User Not Found:**
- URL: `http://localhost:3000/api/users/999`
- Expected Response (404 Not Found):
```json
{
  "success": false,
  "message": "User not found"
}
```

---

## Postman Collection Setup

### Creating a Collection:
1. Open Postman
2. Click "New" â†’ "Collection"
3. Name it "User REST API"
4. Add requests for each endpoint above

### Environment Variables:
Create an environment with:
- `base_url`: `http://localhost:3000`
- `user_id`: `1` (for testing)

### Pre-request Scripts:
For dynamic testing, you can add scripts like:
```javascript
// Generate random email for POST requests
pm.environment.set("random_email", "test" + Math.random().toString(36).substring(7) + "@example.com");
```

### Tests (Add to each request):
```javascript
// Basic status code test
pm.test("Status code is correct", function () {
    pm.response.to.have.status(200); // Adjust based on expected status
});

// Response time test
pm.test("Response time is less than 500ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(500);
});

// JSON response test
pm.test("Response is JSON", function () {
    pm.response.to.be.json;
});

// Success field test
pm.test("Response has success field", function () {
    const jsonData = pm.response.json();
    pm.expect(jsonData).to.have.property('success');
});
```

## Common HTTP Status Codes Used

- **200 OK**: Successful GET, PUT, PATCH, DELETE
- **201 Created**: Successful POST
- **400 Bad Request**: Validation errors
- **404 Not Found**: Resource doesn't exist
- **409 Conflict**: Duplicate email
- **500 Internal Server Error**: Server error

## Tips for Testing

1. **Test Happy Paths First**: Start with valid requests
2. **Test Edge Cases**: Invalid data, missing fields, non-existent IDs
3. **Test Error Handling**: Verify proper error responses
4. **Use Environment Variables**: Make tests reusable
5. **Automate with Scripts**: Use Postman's testing features
6. **Check Response Times**: Ensure API performance
7. **Validate JSON Structure**: Ensure consistent response format

This comprehensive testing approach will help you verify all CRUD operations and edge cases of your REST API!